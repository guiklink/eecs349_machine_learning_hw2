# This is a program that validates the model generated by 
# model-train based on the validation set. 

from tree_util import *
from data_util import *
import mockTree
import numpy as np

# 0.6458767915
# 0.4152051353
# 0.5437003729
# 0.7401316767
# 0.7028994802
# 0.7129567872
# ?
# 0.8103100412
# 0.3269774799
# 0.7337943657
# 0.5631648111
# 0.6173030736
# 0.3801946413
# 0.4905306461
# 0.6776226923
# 0.2904823661
# 0.178755435
# 0.5654748159
# 0.2968391471
# 0.5323625428


tree = mockTree.makeTree()
valdata = importDataCSV("metadata.csv","minidata.csv")

def validateTree(tree, dataSet):
	"""Used for validating a learned tree against a validation set, returns percentage accuracy"""
	print "validateTree called"
	count = 0 #used for tracking how many times we've correctly classified our data
	for index in range(len(dataSet)):
		dataPoint = dataSet[index]
		# print "Current dataPoint: ", dataPoint.retrieve('id').getValue()
		node = 0
		for i in tree.fields[tree.nType].keys():
			if NodeType.ROOT == tree.getNodeType(i):
				node = i #basically an index
				# print "root node: ", node
				break
			#keep going down the tree until no children exist, then get output classification

		# print "node type", tree.getNodeType(node)

		while tree.getNodeType(node) != NodeType.LEAF and tree.getNodeType(node) != NodeType.UNDEF:
			
			splitVal = tree.getSplitValue(node)
			# print "tree split value: ", splitVal
			splitAttribute = tree.getSplitAtribute(node)
			# print "tree split attribute: ", splitAttribute
			val = dataPoint.retrieve(splitAttribute).getValue()
			if val = None:
				nm = filterTableByID(dataSet, tree.getDataRowsIDs(node))
				val = np.median(retrieveDataFromColumn(nm, splitAttribute))
			print "val is",val
			# print "data point value for split attribute: ", val
			if FeatureType.CONTINUOUS == tree.getSplitType(node): 
				if val >= splitVal:
					node = tree.getChild0(node)
					# print "node type", tree.getNodeType(node)
					# print "greater than", "going to next node", node
				else:
					node = tree.getChild1(node)
					# print "lesser than", "going to next node", node
					# print "node type", tree.getNodeType(node)
			elif FeatureType.DISCRETE == tree.getSplitType(node):
				if val != splitVal:
					node = tree.getChild0(node)
					# print "not equal", " going to next node", node
					# print "node type", tree.getNodeType(node)
				else:
					node = tree.getChild1(node)
					# print "equal", "goint to next node", node
					# print "node type", tree.getNodeType(node)

		if tree.getNodeType(node)== NodeType.LEAF:
			leafClass = tree.getMajorityClassification(node)
			if dataPoint.retrieve('winner').getValue() == leafClass:
				count = count + 1
			
				
	accuracy = float(100*count)/len(dataSet)
	print "accuracy is: ", accuracy


	return accuracy


